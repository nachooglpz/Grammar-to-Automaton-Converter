mystring -> 'hello'
clcear
clear
clc
mystring <- 'welcome'
mystring <- 'hello'
my_string <- 'hello'
rm(list = ls())
my_string <- 'hello'
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
paste('abc', 'def', 'ghi', sep=',') # Concatenate strings
paste0('abc', 'def')
source("~/.active-rstudio-document", echo = TRUE)
# ---------- Can also ask for help on a method ----------
help(print)
source("~/.active-rstudio-document", echo = TRUE)
help(c)
game.difficulty
game.difficulty <- factor(c('h', 'e', 'm', 'm'),
levels = c('e', 'm', 'h'),
ordered = TRUE)
game.difficulty
game.difficulty <- factor(c('h', 'e', 'm', 'm'),
levels = c('e', 'm', 'h'),
ordered = TRUE)
game.difficulty
as.integer(game.difficulty)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
null_var <- NULL
is.null(null_var)
# ---------- BOOLEANS ----------
bool_var <- TRUE # Or can use bool_var <- T
null_var <- NULL
is.null(null_var)
is.null(bool_var)
# ---------- BOOLEANS ----------
bool_var <- TRUE # Or can use bool_var <- T
null_var <- NULL # Can define null variables
#Checking if variables are true
isTRUE(bool_var)
isTRUE(null_var)
# Checking if varibales are null
is.null(null_var)
is.null(bool_var)
# ---------- BOOLEANS ----------
bool_var <- TRUE # Or can use bool_var <- T
null_var <- NULL # Can define null variables
#Checking if variables are true
isTRUE(bool_var)
isTRUE(null_var)
# Checking if varibales are null
is.null(null_var)
is.null(bool_var)
---- Vectors ----------
v <- c(1, 2, 3, 4, 5)
# ---------- Vectors ----------
v <- c(1, 2, 3, 4, 5)
class(v)
as.integer(v)
class(v)
# ---------- Vectors ----------
v <- c(1, 2, 3, 4, 5)
class(v)
as.integer(v)
class(v)
# ---------- Vectors ----------
v <- c(1, 2, 3, 4, 5)
class(v)
as.integer(v)
class(as.integer(v))
length(v)
v <- c(v, 77)
v
length(v)
v <- c(89, 10, v, 56) # Elements can be appended in the order we want
v
length(v)
#Take elements from the array
v[2]
v[1:3]
# Replace elements
v[1] <- 11
v
v[1:2] <- c(15, 12)
v
# ---------- Sequences ----------
my.sequence <- 2:15
my.sequence
seq(2, 15, 2)
v + 10
v * v # Every element will be multiplied by itself
source("~/Documents/RPrograms/R_starter.R", echo = TRUE)
source("~/Documents/RPrograms/R_starter.R", echo = TRUE)
# ---------- Matrices ----------
m <- matrix(nrow= 3, ncol = 3)
m
# ---------- Matrices ----------
m <- matrix(nrow= 3, ncol = 3, data = 1:9)
m
# ---------- Matrices ----------
m <- matrix(nrow= 3, ncol = 3, data = 1:9)
m
m <- matrix(nrow= 3, ncol = 3, data = 1:9, byrow = T)
m
# Add a column to a matrix
cbind(m, c(11, 22, 33))
m
rbind(m, c(77, 88, 99))
m
# Add a column to a matrix
cbind(m, c(11, 22, 33))
m
rbind(m, c(77, 88, 99))
m
cbind(m, c(11, 22, 33))
rbind(m, c(77, 88, 99))
# Extract elements
m[3, 2]
m[2,]
m[,3]
m
# Matrix operations
m + 1
m * m
m %% m # Acutal linear algebra matrix multiplication
m
m %% m # Acutal linear algebra matrix multiplication
# ---------- Can also ask for help on a method ----------
# help(print)
# help(c)
help(%%)
m %*% m # Acutal linear algebra matrix multiplication
# ---------- Lists ----------
x <- list(55, c('a', 'b', 'c'), TRUE, list())
x
x[1]
x[[1]] * 2
x[1] * 2
x[1] * 2
x[[1]] * 2
# List operators
x[1]
x[[1]] * 2
x[[2][2]]
x[[2]][2]
x[[2]][2]
x$year <- c('2000', '2001', '2002')
x
x
x$year
x[['year']]
# Graph
library(igraph)
# Graph
install.packages("igraph")
library(igraph)
g <- graph(c(1,2, 2,3, 2,4 1,4, 5,5, 3,6), directed = F)
g <- graph(c(1,2, 2,3, 2,4 1,4, 5,5, 3,6), directed = F)
library(igraph)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colores <- mapping.colors[node.types]
set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
library(igraph)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c('a', 'b', 'c', 'd', 'e', 'f')
node.types <- c(1, 2, 2, 2, 2, 3)
mapping.colors <- c('gray', 'white', 'yellow')
node.colors <- mapping.colors[node.types]
# set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
# ---------- Can also ask for help on a method ----------
# ---------- Can also ask for help on a method ----------
# help(print)
# ---------- Can also ask for help on a method ----------
# help(print)
# help(c)
# Shiny apps
install.packages("shiny")
# Cargar funciones
# getwd()
setwd('/home/nacho/Documents/Grammar-to-Automaton-Converter')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
